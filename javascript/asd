import {
  spells
} from "./spells.js";

// Función para crear el elemento de botón preparado
function createPreparedButton(spell) {
  const preparedButton = document.createElement("button");
  preparedButton.classList.add("prepared-spells", "main-buttons");
  preparedButton.innerHTML =
    '<img src="../images/prepared-icon.png" alt="Mano con hechizo">';
  // Agregar o quitar la clase "prepared-spell" según el estado almacenado
  if (spell.prepared) {
    preparedButton.classList.add("prepared-spell");
  }
  preparedButton.addEventListener("click", () => {
    preparedButton.classList.toggle("prepared-spell");
    const isPrepared = preparedButton.classList.contains("prepared-spell");
    spell.prepared = isPrepared;
    // Guardar el estado de 'prepared' en el localStorage
    localStorage.setItem(spell.name, isPrepared);

    // Agregar un console.log para verificar si el booleano 'prepared' cambia correctamente
    console.log(`El estado de 'prepared' para el hechizo ${spell.name} es: ${spell.prepared}`);
  });
  return preparedButton;
}

// ----> Variables Globales <----- \\
// ------------------------------- \\
const bookContainer = document.getElementById('book-container')
const spellsContainer = document.getElementById('spells-container');
let showPrepared = false;
const showAllButton = document.querySelector(".show-all-spells");
let showAllSpells = true;

// ---> Cambio de Página <----- \\
// ---------------------------- \\
const resolutions = [{
    width: 425,
    spellsPerPage: 5
  },
  {
    width: 768,
    spellsPerPage: 2
  },
  {
    width: 1024,
    spellsPerPage: 3
  },
  {
    width: 1440,
    spellsPerPage: 4
  },
  // Agrega más resoluciones según tus necesidades
];

// Evalúa el ancho de la pantalla y devuelve la cantidad de hechizos por página correspondiente a la resolución más adecuada. 
let spellsPerPage = calculateSpellsPerPage();

function calculateSpellsPerPage() {
  const screenWidth = window.innerWidth;
  for (let i = resolutions.length - 1; i >= 0; i--) {
    if (screenWidth >= resolutions[i].width) {
      return resolutions[i].spellsPerPage;
    }
  }
  return resolutions[0].spellsPerPage;
}

let currentPage = 1;
let currentSpellIndex = 0;

// Calcula la cantidad total de páginas y establece la página actual
let totalPages = Math.ceil(spells.length / spellsPerPage);

function renderSpells() {
  spellsContainer.innerHTML = "";

  const startIndex = (currentPage - 1) * spellsPerPage;
  const endIndex = Math.min(startIndex + spellsPerPage, spells.length);
  const spellsToRender = spells.slice(startIndex, endIndex);

  for (let i = 0; i < spellsToRender.length; i++) {
    const spell = spellsToRender[i];
    createMainSpellCard(spell, spellsContainer);
  }
}

// Llama a la función para renderizar los hechizos inicialmente
renderSpells(spells);
console.log(spells)

function goToNextPage() {
  currentPage++;
  if (currentPage > totalPages) {
    currentPage = 1;
  }
  currentSpellIndex = (currentPage - 1) * spellsPerPage;
  renderSpells();
}

function goToPreviousPage() {
  if (currentPage === 1) {
    currentPage = totalPages;
  } else {
    currentPage--;
  }
  currentSpellIndex = (currentPage - 1) * spellsPerPage;
  renderSpells();
}

// Al cambiar tamaño de ventana, se recalcula la cantidad de hechizos por página
window.addEventListener("resize", () => {
  spellsPerPage = calculateSpellsPerPage();
  totalPages = Math.ceil(spells.length / spellsPerPage);
  renderSpells();
});

// Crea los botones de cambio de pagina dentro de bookContainer
const previousPageButton = document.createElement("button");
previousPageButton.id = "previous-page-button";
bookContainer.appendChild(previousPageButton);

const nextPageButton = document.createElement("button");
nextPageButton.id = "next-page-button";
bookContainer.appendChild(nextPageButton);

previousPageButton.addEventListener("click", () => {
  goToPreviousPage();
});

nextPageButton.addEventListener("click", () => {
  goToNextPage();
});

// -----> Crear Hechizo <------ \\
// ---------------------------- \\
function createMainSpellCard(spell) {
  const spellCard = document.createElement("div");
  spellCard.classList.add("spell-card");
  spellsContainer.appendChild(spellCard);

  // Asignar la clase de escuela de magia
  assignSchoolClass(spell, spellCard);

  const spellMain = document.createElement("div");
  spellMain.classList.add("spell-main");
  spellCard.appendChild(spellMain);

  // Elementos de vista colapsada
  const spellName = createSpellElement("h3", "spell-name", spell.name);
  spellMain.appendChild(spellName);

  const spellCastingTime = createSpellElement("p", "spell-casting-time", `Casting Time: ${spell.castingTime}`);
  spellMain.appendChild(spellCastingTime);

  const spellSchool = createSpellElement("p", "spell-school", `School: ${spell.school}`);
  spellMain.appendChild(spellSchool);

  const spellLevel = createSpellElement("p", "spell-level", spell.level);
  spellMain.appendChild(spellLevel);

  const viewButtonSpell = createSpellButton("view-button-spell", "Cambiar vista");
  spellMain.appendChild(viewButtonSpell);

  viewButtonSpell.addEventListener("click", () => {
    spellCard.classList.toggle("change-view-spell");
    if (spellCard.classList.contains("change-view-spell")) {
      expandSpellCard(spellCard, spell);
    } else {
      collapseSpellCard(spellCard);
    }
  });

  // Crea boton de hechizos preparados ------------->
  const preparedStatus = localStorage.getItem(spell.name) === "true";
  spell.prepared = preparedStatus; // Agregamos la propiedad 'prepared' al objeto 'spell'
  const preparedButton = createPreparedButton(spell);
  spellMain.appendChild(preparedButton);

  const favoriteButton = createSpellButton("favorite-spells", "Estrella favoritos");
  spellMain.appendChild(favoriteButton);

  favoriteButton.addEventListener("click", () => {
    favoriteButton.classList.toggle("favorite-spell");
  });

  const castButton = createSpellButton("cast-spells", "Mano con hechizo");
  spellMain.appendChild(castButton);

  castButton.addEventListener("click", () => {
    castButton.classList.toggle("casteado");
    mostrarImagenEmergente(spell);
  });

  function createSpellElement(tag, className, text) {
    const element = document.createElement(tag);
    element.classList.add(className);
    element.textContent = text;
    return element;
  }

  function createSpellButton(className, altText) {
    const button = document.createElement("button");
    button.classList.add(className, "main-buttons");
    button.innerHTML = `<img src="../images/${className}-icon.png" alt="${altText}">`;
    return button;
  }

  function assignSchoolClass(spell, spellCard) {
    const schools = ["abjuration", "divination", "conjuration", "enchantment", "evocation", "illusion", "necromancy", "transmutation"];
    for (const school of schools) {
      if (spell.school.toLowerCase().includes(school)) {
        spellCard.classList.add(school);
        break;
      }
    }
  }
  /// Define la función para mostrar la imagen emergente y recibe el hechizo correspondiente
  function mostrarImagenEmergente(spell) {
    // Crea un nuevo div para la imagen casteada
    const castedSpellDiv = document.createElement("div");
    castedSpellDiv.classList.add("casted-spell");
    const imagenHechizo = document.createElement("img");
    const imagenSpell = spell.image;

    // Establece la imagen del hechizo
    imagenHechizo.src = imagenSpell;
    imagenHechizo.alt = "Imagen del hechizo";
    imagenHechizo.style.width = "300px";
    imagenHechizo.style.height = "200px";

    castedSpellDiv.appendChild(imagenHechizo);

    const hideButton = document.createElement("button");
    hideButton.textContent = "X";
    hideButton.addEventListener("click", function () {
      castedSpellDiv.remove();
    });
    castedSpellDiv.appendChild(hideButton);
    spellCard.appendChild(castedSpellDiv);
  }
  return spellCard;
}

function expandSpellCard(spellCard, spell) {
  // Busca el elemento .spell-main dentro del .spell-card
  const spellMain = spellCard.querySelector(".spell-main");

  // Crea el elemento para mostrar los componentes del hechizo
  const spellComponents = document.createElement("p");
  spellComponents.classList.add("spell-components");
  spellComponents.textContent = `Components: ${spell.components}`;
  spellMain.appendChild(spellComponents);

  // Verifica si existen componentes materiales y crea el elemento correspondiente
  if (spell.materialComponents) {
    const spellMaterialComponents = document.createElement("p");
    spellMaterialComponents.classList.add("spell-material-components");
    spellMaterialComponents.textContent = `M: ${spell.materialComponents}`;
    spellMain.appendChild(spellMaterialComponents);
  }

  const spellBoxDescription = document.createElement('div');
  spellBoxDescription.classList.add('spell-box-description');
  spellCard.appendChild(spellBoxDescription);

  const spellDuration = document.createElement('p');
  spellDuration.classList.add("spell-duration");
  spellDuration.textContent = `Duration: ${spell.duration}`;
  spellMain.appendChild(spellDuration);

  // Los atributos en if statement solo son visibles si tiene info el hechizo
  if (spell.range) {
    const spellRange = document.createElement('p');
    spellRange.classList.add("spell-range");
    spellRange.textContent = `Range: ${spell.range}`;
    spellMain.appendChild(spellRange);
  }
  if (spell.target) {
    const spellTarget = document.createElement('p');
    spellTarget.classList.add("spell-target");
    spellTarget.textContent = `Target: ${spell.target}`;
    spellMain.appendChild(spellTarget);
  }
  if (spell.effect) {
    const spellEffect = document.createElement('p');
    spellEffect.classList.add("spell-effect");
    spellEffect.textContent = `Effect: ${spell.effect}`;
    spellMain.appendChild(spellEffect);
  }
  if (spell.area) {
    const spellArea = document.createElement('p');
    spellArea.classList.add("spell-area");
    spellArea.textContent = `Area: ${spell.area}`;
    spellMain.appendChild(spellArea);
  }
  if (spell.savingThrow) {
    const spellSavingThrow = document.createElement('p');
    spellSavingThrow.classList.add("spell-saving-throw");
    spellSavingThrow.textContent = `Saving Throw: ${spell.savingThrow}`;
    spellMain.appendChild(spellSavingThrow);
  }
  if (spell.spellResistance) {
    const spellResistance = document.createElement('p');
    spellResistance.classList.add("spell-resistance");
    spellResistance.textContent = `Spell Resistance: ${spell.spellResistance}`;
    spellMain.appendChild(spellResistance);
  }
  if (spell.XPCost) {
    const spellXPCost = document.createElement('p');
    spellXPCost.classList.add("spell-XPCost");
    spellXPCost.textContent = `XPCost: ${spell.XPCost}`;
    spellMain.appendChild(spellXPCost);
  }
  if (spell.focus) {
    const spellFocus = document.createElement('p');
    spellFocus.classList.add("spell-focus");
    spellFocus.textContent = `Focus: ${spell.focus}`;
    spellMain.appendChild(spellFocus);
  }
  //---------> Fin de vista detalle
  //---------------> 4 - Vista completa
  const spellDescription = document.createElement('p');
  spellDescription.innerHTML = spell.description.replace(/~/g, '<br>');
  spellBoxDescription.appendChild(spellDescription);
}

function createFullSpellCard(spell) {
  const spellCard = createMainSpellCard(spell);
  expandSpellCard(spellCard, spell);
  spellCard.classList.toggle("change-view-spell");
  return spellCard;
}

// ---> Buscar Hechizos <--- \\
// ---------------------------- \\
// Obtén el elemento de entrada de búsqueda y la lista de autocompletado
const searchInput = document.querySelector("#search-input");
const autocompleteList = document.querySelector("#autocomplete-list");

// Registra un evento de entrada en el campo de búsqueda
searchInput.addEventListener("input", handleSearchInput);

// Función para manejar la entrada en el campo de búsqueda
function handleSearchInput() {
  const searchTerm = searchInput.value.toLowerCase();
  // Filtra los hechizos que coinciden con el término de búsqueda
  const matchingSpells = spells.filter(spell =>
    spell.name.toLowerCase().includes(searchTerm)
  );
  currentSpellIndex = 0;
  // Actualiza la lista de autocompletado
  updateAutocompleteList(matchingSpells);
}

// Función para actualizar la lista de autocompletado
function updateAutocompleteList(matchingSpells) {
  // Borra los elementos anteriores de la lista de autocompletado
  autocompleteList.innerHTML = "";

  // Crea nuevos elementos de lista para los hechizos coincidentes
  matchingSpells.forEach(spell => {
    const listItem = document.createElement("li");
    listItem.textContent = spell.name;
    listItem.addEventListener("click", () => {
      currentSpellIndex = matchingSpells.indexOf(spell);
      // Al hacer clic en un elemento de la lista de autocompletado, establece el valor del campo de búsqueda y muestra el hechizo
      searchInput.value = spell.name;
      displaySpell(spell);
      // Borra la lista de autocompletado
      autocompleteList.innerHTML = "";
    });
    autocompleteList.appendChild(listItem);
  });

  // Agrega un evento de clic en cualquier lugar fuera del campo de búsqueda para borrar la lista de autocompletado y restablecer el campo al placeholder
  document.addEventListener("click", (event) => {
    const target = event.target;
    if (!target.closest("#autocomplete-list") && !target.closest("#search-input")) {
      autocompleteList.innerHTML = "";
      searchInput.value = "";
      searchInput.placeholder = "Buscar hechizo...";
    }
  });
}

// Función para mostrar el hechizo seleccionado
function displaySpell(spell) {
  currentSpellIndex = spells.indexOf(spell);
  console.log('currentSpellIndex: ', currentSpellIndex);
  const spellsContainer = document.querySelector("#spells-container");
  spellsContainer.innerHTML = ""; // Borra el contenido existente del contenedor
  createFullSpellCard(spell, spellsContainer); // Muestra el hechizo buscado en el contenedor
}

// ------------ > Funciones optimizadas:
function collapseSpellCard(spellCard) {
  // Busca el elemento .spell-main dentro del .spell-card
  const spellMain = spellCard.querySelector(".spell-main");

  // Clases de elementos de detalles a eliminar
  const detailClasses = [
    "spell-components",
    "spell-material-components",
    "spell-duration",
    "spell-range",
    "spell-target",
    "spell-effect",
    "spell-area",
    "spell-saving-throw",
    "spell-resistance",
    "spell-XPCost",
    "spell-focus",
  ];

  // Eliminar elementos de detalles si existen
  detailClasses.forEach((className) => {
    const detailElement = spellMain.querySelector(`.${className}`);
    if (detailElement) {
      spellMain.removeChild(detailElement);
    }
  });

  // Eliminar el elemento de descripción si existe
  const spellBoxDescription = spellCard.querySelector(".spell-box-description");
  if (spellBoxDescription) {
    spellCard.removeChild(spellBoxDescription);
  }
}


const preparedButton = document.querySelector(".only-prepared-spells");
preparedButton.addEventListener("click", showPreparedSpells);

// Función para mostrar los hechizos preparados o todos los hechizos
function showPreparedSpells() {
  showAllSpells = !showAllSpells;
  const filteredSpells = showAllSpells ? spells : spells.filter((spell) => spell.prepared);
  currentPage = 1;
  currentSpellIndex = 0;
  totalPages = Math.ceil(filteredSpells.length / spellsPerPage);
  renderSpells(filteredSpells);
}

// Escucha el evento click en el botón "Prepared"
showAllButton.addEventListener("click", () => {
  showPreparedSpells();
});